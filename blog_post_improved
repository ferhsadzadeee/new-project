import json
from datetime import datetime
import time

posts = []

def start():
    print(r"""
    Welcome to Blog Post Manager by Farhadzada Nigar!
               Let's manage your posts!
    """)
    time.sleep(2)

def wait():
    input("Press Enter to continue...")

def help_menu():
    print("""
Help - Instructions:
0. Help: See this menu.
1. Add Post: Add a new blog post.
2. View Posts: See all saved posts.
3. Search: Find a post by ID or title.
4. Update: Modify any post's info.
5. Delete: Remove a post.
6. Summary: See total posts and top author.
7. Save: Save data to a file.
8. Load: Load data from a file.
9. Clear: Delete all posts.
10. Exit: Quit the app.
11. Show Latest Post
12. Show Oldest Post
13. Search by Author
14. Posts by Date Range
15. Sort Posts by Date
    """)

def get_input(prompt, type_=str):
    while True:
        try:
            return type_(input(prompt))
        except:
            print("Invalid input, try again.")

def get_date(prompt):
    while True:
        date = input(prompt)
        try:
            datetime.strptime(date, "%Y-%m-%d")
            return date
        except:
            print("Use YYYY-MM-DD format.")

def next_id():
    if not posts:
        return 1
    return max(p['id'] for p in posts) + 1

def add():
    print("Add a new blog post")
    p = {
        "id": next_id(),
        "title": input("Post Title: "),
        "author": input("Author Name: "),
        "content": input("Content: "),
        "date_published": get_date("Date Published (YYYY-MM-DD): ")
    }
    posts.append(p)
    print(f"Post added with ID: {p['id']}")

def view():
    if not posts:
        print("No posts found.")
    else:
        for p in posts:
            print(f"ID {p['id']} - {p['title']} by {p['author']} on {p['date_published']}")
            print(f"Content: {p['content']}")
            print("-" * 40)

def find():
    k = input("Search by title or ID: ")
    for p in posts:
        if k.lower() in p['title'].lower() or str(p['id']) == k:
            print(p)
            return
    print("Not found.")

def update():
    pid = get_input("ID to update: ", int)
    for p in posts:
        if p["id"] == pid:
            p["title"] = input("New title: ")
            p["author"] = input("New author: ")
            p["content"] = input("New content: ")
            p["date_published"] = get_date("New date (YYYY-MM-DD): ")
            print("Post updated.")
            return
    print("Not found.")

def delete():
    pid = get_input("ID to delete: ", int)
    for p in posts:
        if p["id"] == pid:
            posts.remove(p)
            print("Post deleted.")
            return
    print("Not found.")

def sum_stat():
    if not posts:
        print("No posts.")
        return
    total = len(posts)
    authors = [p["author"] for p in posts]
    unique_authors = set(authors)
    print(f"{total} posts. {len(unique_authors)} unique authors.")
    if authors:
        top_author = max(set(authors), key=authors.count)
        print(f"Top author: {top_author}")

def save():
    try:
        with open("posts.json", "w") as f:
            json.dump(posts, f)
        print("Data saved.")
    except:
        print("Error saving.")

def load():
    global posts
    try:
        with open("posts.json", "r") as f:
            posts = json.load(f)
        print("Data loaded.")
    except:
        print("Could not load file.")

def clear():
    c = input("Clear all posts? (y/n): ")
    if c.lower() == "y":
        posts.clear()
        print("All posts cleared.")

def recursive_count(i=0):
    if i >= len(posts):
        return 0
    return 1 + recursive_count(i+1)

def show_latest():
    if not posts:
        print("No posts.")
        return
    latest = max(posts, key=lambda x: x["date_published"])
    print(f"Latest Post:\nID {latest['id']} - {latest['title']} by {latest['author']} on {latest['date_published']}")
    print(f"Content: {latest['content']}")
    print("-" * 40)

def show_oldest():
    if not posts:
        print("No posts.")
        return
    oldest = min(posts, key=lambda x: x["date_published"])
    print(f"Oldest Post:\nID {oldest['id']} - {oldest['title']} by {oldest['author']} on {oldest['date_published']}")
    print(f"Content: {oldest['content']}")
    print("-" * 40)

def search_by_author():
    name = input("Author name to search: ")
    found = False
    for p in posts:
        if name.lower() in p['author'].lower():
            print(f"ID {p['id']} - {p['title']} by {p['author']} on {p['date_published']}")
            print(f"Content: {p['content']}")
            print("-" * 40)
            found = True
    if not found:
        print("No posts found for this author.")

def posts_by_date_range():
    start_date = get_date("Start date (YYYY-MM-DD): ")
    end_date = get_date("End date (YYYY-MM-DD): ")
    found = False
    for p in posts:
        if start_date <= p['date_published'] <= end_date:
            print(f"ID {p['id']} - {p['title']} by {p['author']} on {p['date_published']}")
            print(f"Content: {p['content']}")
            print("-" * 40)
            found = True
    if not found:
        print("No posts in this date range.")

def sort_posts_by_date():
    if not posts:
        print("No posts to sort.")
        return
    sorted_posts = sorted(posts, key=lambda x: x["date_published"])
    for p in sorted_posts:
        print(f"ID {p['id']} - {p['title']} by {p['author']} on {p['date_published']}")
        print(f"Content: {p['content']}")
        print("-" * 40)

def menu():
    while True:
        print("\n*** Blog Post Manager Menu ***")
        print("""
0. Help Menu
1. Add New Post
2. View All Posts
3. Search Post
4. Update Post
5. Delete Post
6. Summary Statistics
7. Save to File
8. Load from File
9. Clear All Posts
10. Exit
11. Show Latest Post
12. Show Oldest Post
13. Search by Author
14. Posts by Date Range
15. Sort Posts by Date
        """)
        c = get_input("Select option: ", int)
        if c == 0: help_menu()
        elif c == 1: add()
        elif c == 2: view()
        elif c == 3: find()
        elif c == 4: update()
        elif c == 5: delete()
        elif c == 6:
            sum_stat()
            print(f"Total posts (recursively): {recursive_count()}")
        elif c == 7: save()
        elif c == 8: load()
        elif c == 9: clear()
        elif c == 10:
            print("Goodbye!")
            break
        elif c == 11: show_latest()
        elif c == 12: show_oldest()
        elif c == 13: search_by_author()
        elif c == 14: posts_by_date_range()
        elif c == 15: sort_posts_by_date()
        else:
            print("Invalid.")
        wait()

start()
menu()
